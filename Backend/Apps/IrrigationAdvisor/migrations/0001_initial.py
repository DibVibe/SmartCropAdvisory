# Generated by Django 4.2.11 on 2025-09-11 21:28

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Field",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("area", models.FloatField(help_text="Area in hectares")),
                (
                    "soil_type",
                    models.CharField(
                        choices=[
                            ("clay", "Clay"),
                            ("sandy", "Sandy"),
                            ("loam", "Loam"),
                            ("silt", "Silt"),
                            ("peat", "Peat"),
                            ("chalk", "Chalk"),
                        ],
                        max_length=20,
                    ),
                ),
                ("crop_type", models.CharField(max_length=50)),
                ("planting_date", models.DateField()),
                ("expected_harvest_date", models.DateField()),
                (
                    "latitude",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ]
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ]
                    ),
                ),
                (
                    "elevation",
                    models.FloatField(
                        blank=True, help_text="Elevation in meters", null=True
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="irrigation_fields",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WaterSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("well", "Well"),
                            ("river", "River"),
                            ("canal", "Canal"),
                            ("pond", "Pond"),
                            ("reservoir", "Reservoir"),
                            ("rainwater", "Rainwater Harvesting"),
                        ],
                        max_length=20,
                    ),
                ),
                ("capacity", models.FloatField(help_text="Capacity in cubic meters")),
                (
                    "current_level",
                    models.FloatField(help_text="Current water level in cubic meters"),
                ),
                (
                    "quality_rating",
                    models.IntegerField(
                        help_text="Water quality rating (1-5)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "ph_level",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(14),
                        ],
                    ),
                ),
                (
                    "tds",
                    models.FloatField(
                        blank=True, help_text="Total Dissolved Solids in ppm", null=True
                    ),
                ),
                (
                    "location_lat",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ]
                    ),
                ),
                (
                    "location_lon",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ]
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="IrrigationSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scheduled_date", models.DateField()),
                ("scheduled_time", models.TimeField()),
                ("duration_minutes", models.IntegerField()),
                ("water_amount", models.FloatField(help_text="Water amount in liters")),
                (
                    "irrigation_type",
                    models.CharField(
                        choices=[
                            ("drip", "Drip Irrigation"),
                            ("sprinkler", "Sprinkler"),
                            ("flood", "Flood Irrigation"),
                            ("furrow", "Furrow Irrigation"),
                            ("center_pivot", "Center Pivot"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="scheduled",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="irrigation_schedules",
                        to="IrrigationAdvisor.field",
                    ),
                ),
            ],
            options={
                "ordering": ["scheduled_date", "scheduled_time"],
            },
        ),
        migrations.CreateModel(
            name="IrrigationHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("irrigation_date", models.DateField()),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                (
                    "actual_duration",
                    models.IntegerField(help_text="Duration in minutes"),
                ),
                ("water_used", models.FloatField(help_text="Water used in liters")),
                ("irrigation_type", models.CharField(max_length=50)),
                (
                    "moisture_before",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "moisture_after",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "energy_consumed",
                    models.FloatField(blank=True, help_text="Energy in kWh", null=True),
                ),
                (
                    "cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="irrigation_history",
                        to="IrrigationAdvisor.field",
                    ),
                ),
                (
                    "schedule",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="history",
                        to="IrrigationAdvisor.irrigationschedule",
                    ),
                ),
            ],
            options={
                "ordering": ["-irrigation_date", "-start_time"],
            },
        ),
        migrations.CreateModel(
            name="CropWaterRequirement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("crop_name", models.CharField(max_length=50)),
                (
                    "growth_stage",
                    models.CharField(
                        choices=[
                            ("initial", "Initial Stage"),
                            ("development", "Development Stage"),
                            ("mid_season", "Mid Season"),
                            ("late_season", "Late Season"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "daily_water_requirement",
                    models.FloatField(help_text="Daily water requirement in mm"),
                ),
                (
                    "critical_moisture_level",
                    models.FloatField(
                        help_text="Critical soil moisture level in percentage",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "optimal_moisture_level",
                    models.FloatField(
                        help_text="Optimal soil moisture level in percentage",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "max_moisture_level",
                    models.FloatField(
                        help_text="Maximum soil moisture level in percentage",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("root_depth", models.FloatField(help_text="Root depth in cm")),
                (
                    "crop_coefficient",
                    models.FloatField(help_text="Kc value for ET calculation"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["crop_name", "growth_stage"],
                "unique_together": {("crop_name", "growth_stage")},
            },
        ),
        migrations.CreateModel(
            name="SoilMoisture",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField()),
                (
                    "moisture_level",
                    models.FloatField(
                        help_text="Moisture level in percentage",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "depth",
                    models.FloatField(default=30, help_text="Measurement depth in cm"),
                ),
                (
                    "temperature",
                    models.FloatField(
                        blank=True, help_text="Soil temperature in Celsius", null=True
                    ),
                ),
                (
                    "ph_level",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(14),
                        ],
                    ),
                ),
                (
                    "electrical_conductivity",
                    models.FloatField(blank=True, help_text="EC in dS/m", null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="moisture_readings",
                        to="IrrigationAdvisor.field",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["field", "-timestamp"],
                        name="IrrigationA_field_i_57359b_idx",
                    )
                ],
            },
        ),
        migrations.AddIndex(
            model_name="irrigationschedule",
            index=models.Index(
                fields=["field", "scheduled_date"],
                name="IrrigationA_field_i_f8b187_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="irrigationschedule",
            index=models.Index(fields=["status"], name="IrrigationA_status_a660e5_idx"),
        ),
        migrations.AddIndex(
            model_name="irrigationhistory",
            index=models.Index(
                fields=["field", "-irrigation_date"],
                name="IrrigationA_field_i_df705a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="field",
            index=models.Index(
                fields=["user", "is_active"], name="IrrigationA_user_id_2bcd9a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="field",
            index=models.Index(
                fields=["latitude", "longitude"], name="IrrigationA_latitud_c362ff_idx"
            ),
        ),
    ]
