# Generated by Django 4.2.11 on 2025-09-11 21:28

import Apps.CropAnalysis.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Crop",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("scientific_name", models.CharField(blank=True, max_length=200)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("cereal", "Cereal"),
                            ("pulse", "Pulse"),
                            ("vegetable", "Vegetable"),
                            ("fruit", "Fruit"),
                            ("cash_crop", "Cash Crop"),
                            ("spice", "Spice"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "season",
                    models.CharField(
                        choices=[
                            ("kharif", "Kharif"),
                            ("rabi", "Rabi"),
                            ("zaid", "Zaid"),
                            ("perennial", "Perennial"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "min_temperature",
                    models.FloatField(help_text="Minimum temperature in Celsius"),
                ),
                (
                    "max_temperature",
                    models.FloatField(help_text="Maximum temperature in Celsius"),
                ),
                ("min_rainfall", models.FloatField(help_text="Minimum rainfall in mm")),
                ("max_rainfall", models.FloatField(help_text="Maximum rainfall in mm")),
                (
                    "min_ph",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(14),
                        ]
                    ),
                ),
                (
                    "max_ph",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(14),
                        ]
                    ),
                ),
                ("soil_type", models.CharField(max_length=100)),
                ("growth_duration", models.IntegerField(help_text="Days to harvest")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Disease",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("pathogen", models.CharField(blank=True, max_length=200)),
                (
                    "pathogen_type",
                    models.CharField(
                        choices=[
                            ("fungal", "Fungal"),
                            ("bacterial", "Bacterial"),
                            ("viral", "Viral"),
                            ("pest", "Pest"),
                            ("nutritional", "Nutritional Deficiency"),
                            ("environmental", "Environmental"),
                        ],
                        max_length=50,
                    ),
                ),
                ("symptoms", models.TextField()),
                ("favorable_conditions", models.TextField(blank=True)),
                ("prevention_methods", models.TextField()),
                ("treatment_organic", models.TextField(blank=True)),
                ("treatment_chemical", models.TextField(blank=True)),
                (
                    "severity_level",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "crops_affected",
                    models.ManyToManyField(
                        related_name="diseases", to="CropAnalysis.crop"
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Field",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("area", models.FloatField(help_text="Area in hectares")),
                ("location_lat", models.FloatField()),
                ("location_lon", models.FloatField()),
                (
                    "soil_type",
                    models.CharField(
                        choices=[
                            ("sandy", "Sandy"),
                            ("loamy", "Loamy"),
                            ("clay", "Clay"),
                            ("silt", "Silt"),
                            ("peat", "Peat"),
                            ("chalk", "Chalk"),
                            ("red", "Red Soil"),
                            ("black", "Black Soil"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "ph_level",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(14),
                        ],
                    ),
                ),
                (
                    "nitrogen_level",
                    models.FloatField(
                        blank=True, help_text="N level in kg/ha", null=True
                    ),
                ),
                (
                    "phosphorus_level",
                    models.FloatField(
                        blank=True, help_text="P level in kg/ha", null=True
                    ),
                ),
                (
                    "potassium_level",
                    models.FloatField(
                        blank=True, help_text="K level in kg/ha", null=True
                    ),
                ),
                (
                    "organic_carbon",
                    models.FloatField(
                        blank=True, help_text="Organic carbon %", null=True
                    ),
                ),
                ("planting_date", models.DateField(blank=True, null=True)),
                ("expected_harvest", models.DateField(blank=True, null=True)),
                (
                    "irrigation_type",
                    models.CharField(
                        choices=[
                            ("drip", "Drip"),
                            ("sprinkler", "Sprinkler"),
                            ("flood", "Flood"),
                            ("furrow", "Furrow"),
                            ("manual", "Manual"),
                            ("rainfed", "Rain-fed"),
                        ],
                        max_length=50,
                    ),
                ),
                ("boundary_coordinates", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "current_crop",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="CropAnalysis.crop",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cropanalysis_fields",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="YieldPrediction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "predicted_yield",
                    models.FloatField(help_text="Predicted yield in tons/hectare"),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                ("prediction_date", models.DateField()),
                (
                    "actual_yield",
                    models.FloatField(
                        blank=True, help_text="Actual yield after harvest", null=True
                    ),
                ),
                ("weather_data", models.JSONField(default=dict)),
                ("soil_data", models.JSONField(default=dict)),
                ("factors", models.JSONField(default=dict)),
                ("recommendations", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "crop",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="CropAnalysis.crop",
                    ),
                ),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="yield_predictions",
                        to="CropAnalysis.field",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="FarmingTip",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("general", "General"),
                            ("seasonal", "Seasonal"),
                            ("crop_specific", "Crop Specific"),
                            ("pest_management", "Pest Management"),
                            ("soil_health", "Soil Health"),
                            ("water_management", "Water Management"),
                            ("harvesting", "Harvesting"),
                            ("storage", "Storage"),
                        ],
                        max_length=50,
                    ),
                ),
                ("season", models.CharField(blank=True, max_length=20)),
                (
                    "importance",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("crops", models.ManyToManyField(blank=True, to="CropAnalysis.crop")),
            ],
            options={
                "ordering": ["-importance", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DiseaseDetection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        upload_to=Apps.CropAnalysis.models.disease_image_path
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                ("is_healthy", models.BooleanField(default=False)),
                ("analysis_results", models.JSONField(default=dict)),
                ("recommendations", models.TextField(blank=True)),
                ("location_lat", models.FloatField(blank=True, null=True)),
                ("location_lon", models.FloatField(blank=True, null=True)),
                ("weather_conditions", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "crop",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="CropAnalysis.crop",
                    ),
                ),
                (
                    "disease_detected",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="CropAnalysis.disease",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CropRecommendation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("location_lat", models.FloatField()),
                ("location_lon", models.FloatField()),
                ("soil_type", models.CharField(max_length=50)),
                (
                    "ph_level",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(14),
                        ]
                    ),
                ),
                ("nitrogen", models.FloatField()),
                ("phosphorus", models.FloatField()),
                ("potassium", models.FloatField()),
                ("rainfall", models.FloatField()),
                ("temperature", models.FloatField()),
                ("humidity", models.FloatField()),
                ("recommended_crops", models.JSONField(default=list)),
                ("confidence_scores", models.JSONField(default=dict)),
                ("market_analysis", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "field",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="CropAnalysis.field",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
    ]
