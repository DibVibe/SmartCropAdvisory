# Generated by Django 4.2.11 on 2025-09-11 21:28

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Farm",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "farm_type",
                    models.CharField(
                        choices=[
                            ("small", "Small Scale (< 2 hectares)"),
                            ("medium", "Medium Scale (2-10 hectares)"),
                            ("large", "Large Scale (> 10 hectares)"),
                            ("commercial", "Commercial Enterprise"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ]
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ]
                    ),
                ),
                ("address", models.TextField()),
                ("district", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=100)),
                ("pincode", models.CharField(max_length=10)),
                ("total_area", models.FloatField(help_text="Total area in hectares")),
                (
                    "cultivated_area",
                    models.FloatField(help_text="Cultivated area in hectares"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="farms",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Farm",
                "verbose_name_plural": "Farms",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="FarmDashboard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "overall_health_score",
                    models.FloatField(
                        help_text="Overall farm health score (0-10)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("active_crops_count", models.PositiveIntegerField(default=0)),
                ("pending_tasks_count", models.PositiveIntegerField(default=0)),
                ("recent_alerts_count", models.PositiveIntegerField(default=0)),
                (
                    "current_weather_condition",
                    models.CharField(blank=True, max_length=100),
                ),
                ("next_rainfall_prediction", models.DateField(blank=True, null=True)),
                ("best_selling_crops", models.JSONField(default=list)),
                ("price_alerts", models.JSONField(default=list)),
                ("priority_recommendations", models.JSONField(default=list)),
                ("seasonal_tasks", models.JSONField(default=list)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "farm",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dashboard",
                        to="Advisory.farm",
                    ),
                ),
            ],
            options={
                "verbose_name": "Farm Dashboard",
                "verbose_name_plural": "Farm Dashboards",
            },
        ),
        migrations.CreateModel(
            name="AdvisorySession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "session_type",
                    models.CharField(
                        choices=[
                            ("comprehensive", "Comprehensive Farm Advisory"),
                            ("crop_specific", "Crop-Specific Advisory"),
                            ("seasonal", "Seasonal Planning Advisory"),
                            ("emergency", "Emergency Advisory"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "query_parameters",
                    models.JSONField(help_text="Input parameters for advisory"),
                ),
                (
                    "recommendations",
                    models.JSONField(help_text="Generated recommendations"),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ]
                    ),
                ),
                ("crop_analysis_results", models.JSONField(blank=True, null=True)),
                ("weather_analysis_results", models.JSONField(blank=True, null=True)),
                (
                    "irrigation_analysis_results",
                    models.JSONField(blank=True, null=True),
                ),
                ("market_analysis_results", models.JSONField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "farm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="advisory_sessions",
                        to="Advisory.farm",
                    ),
                ),
            ],
            options={
                "verbose_name": "Advisory Session",
                "verbose_name_plural": "Advisory Sessions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AdvisoryAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("weather", "Weather Alert"),
                            ("disease", "Disease Alert"),
                            ("irrigation", "Irrigation Alert"),
                            ("market", "Market Alert"),
                            ("seasonal", "Seasonal Task Alert"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low Priority"),
                            ("medium", "Medium Priority"),
                            ("high", "High Priority"),
                            ("critical", "Critical"),
                        ],
                        max_length=10,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                ("action_required", models.TextField(blank=True)),
                ("is_read", models.BooleanField(default=False)),
                ("is_resolved", models.BooleanField(default=False)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "farm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alerts",
                        to="Advisory.farm",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["farm", "is_read"],
                        name="Advisory_ad_farm_id_6e0651_idx",
                    ),
                    models.Index(
                        fields=["priority", "created_at"],
                        name="Advisory_ad_priorit_14c8d9_idx",
                    ),
                ],
            },
        ),
    ]
