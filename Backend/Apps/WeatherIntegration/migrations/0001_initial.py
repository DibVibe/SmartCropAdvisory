# Generated by Django 4.2.11 on 2025-09-11 21:28

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="CropWeatherRequirement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("crop_name", models.CharField(max_length=50, unique=True)),
                ("temperature_min", models.FloatField()),
                ("temperature_max", models.FloatField()),
                ("temperature_optimal", models.FloatField()),
                ("humidity_min", models.FloatField()),
                ("humidity_max", models.FloatField()),
                ("humidity_optimal", models.FloatField()),
                (
                    "rainfall_min",
                    models.FloatField(help_text="Minimum rainfall in mm per season"),
                ),
                (
                    "rainfall_max",
                    models.FloatField(help_text="Maximum rainfall in mm per season"),
                ),
                (
                    "rainfall_optimal",
                    models.FloatField(help_text="Optimal rainfall in mm per season"),
                ),
                ("growth_period_days", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["crop_name"],
            },
        ),
        migrations.CreateModel(
            name="WeatherStation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "latitude",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ]
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ]
                    ),
                ),
                ("altitude", models.FloatField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
                "indexes": [
                    models.Index(
                        fields=["latitude", "longitude"],
                        name="WeatherInte_latitud_f50dd3_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="WeatherForecast",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("forecast_date", models.DateField()),
                ("forecast_time", models.TimeField(blank=True, null=True)),
                ("temperature_min", models.FloatField()),
                ("temperature_max", models.FloatField()),
                ("temperature_avg", models.FloatField()),
                (
                    "humidity",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                (
                    "precipitation_probability",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                ("precipitation_amount", models.FloatField(default=0)),
                ("wind_speed", models.FloatField()),
                (
                    "cloud_coverage",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                ("weather_condition", models.CharField(max_length=50)),
                ("weather_description", models.CharField(max_length=200)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "station",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="forecasts",
                        to="WeatherIntegration.weatherstation",
                    ),
                ),
            ],
            options={
                "ordering": ["station", "forecast_date", "forecast_time"],
                "indexes": [
                    models.Index(
                        fields=["station", "forecast_date"],
                        name="WeatherInte_station_e28874_idx",
                    )
                ],
                "unique_together": {("station", "forecast_date", "forecast_time")},
            },
        ),
        migrations.CreateModel(
            name="WeatherData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField()),
                ("temperature", models.FloatField(help_text="Temperature in Celsius")),
                ("feels_like", models.FloatField(blank=True, null=True)),
                (
                    "humidity",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                (
                    "pressure",
                    models.FloatField(help_text="Atmospheric pressure in hPa"),
                ),
                ("wind_speed", models.FloatField(help_text="Wind speed in m/s")),
                (
                    "wind_direction",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(360),
                        ]
                    ),
                ),
                ("rainfall", models.FloatField(default=0, help_text="Rainfall in mm")),
                (
                    "cloud_coverage",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                (
                    "visibility",
                    models.FloatField(
                        blank=True, help_text="Visibility in meters", null=True
                    ),
                ),
                ("uv_index", models.FloatField(blank=True, null=True)),
                ("weather_condition", models.CharField(max_length=50)),
                ("weather_description", models.CharField(max_length=200)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "station",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="weather_data",
                        to="WeatherIntegration.weatherstation",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["station", "-timestamp"],
                        name="WeatherInte_station_457179_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="WeatherInte_timesta_ce4598_idx"
                    ),
                ],
                "unique_together": {("station", "timestamp")},
            },
        ),
        migrations.CreateModel(
            name="WeatherAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("alert_type", models.CharField(max_length=50)),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("warning", "Warning"),
                            ("severe", "Severe"),
                            ("extreme", "Extreme"),
                        ],
                        max_length=10,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "station",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alerts",
                        to="WeatherIntegration.weatherstation",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["station", "is_active"],
                        name="WeatherInte_station_b47c74_idx",
                    ),
                    models.Index(
                        fields=["start_time", "end_time"],
                        name="WeatherInte_start_t_47f301_idx",
                    ),
                ],
            },
        ),
    ]
