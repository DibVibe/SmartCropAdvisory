# Generated by Django 4.2.11 on 2025-09-11 21:28

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("farmer", "Farmer"),
                            ("trader", "Trader"),
                            ("expert", "Agricultural Expert"),
                            ("admin", "Administrator"),
                        ],
                        default="farmer",
                        max_length=20,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        max_length=17,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "alternate_phone",
                    models.CharField(
                        blank=True,
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("other", "Other"),
                        ],
                        max_length=10,
                    ),
                ),
                ("address_line1", models.CharField(max_length=255)),
                ("address_line2", models.CharField(blank=True, max_length=255)),
                ("village", models.CharField(max_length=100)),
                ("district", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=100)),
                ("country", models.CharField(default="India", max_length=100)),
                ("pincode", models.CharField(max_length=10)),
                (
                    "latitude",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ],
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ],
                    ),
                ),
                (
                    "farm_size",
                    models.FloatField(
                        blank=True, help_text="Total farm size in hectares", null=True
                    ),
                ),
                (
                    "farming_experience",
                    models.IntegerField(
                        blank=True, help_text="Years of farming experience", null=True
                    ),
                ),
                (
                    "education_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("primary", "Primary School"),
                            ("secondary", "Secondary School"),
                            ("higher_secondary", "Higher Secondary"),
                            ("graduate", "Graduate"),
                            ("post_graduate", "Post Graduate"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "primary_crops",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of primary crops grown",
                    ),
                ),
                (
                    "livestock",
                    models.JSONField(
                        blank=True, default=dict, help_text="Livestock details"
                    ),
                ),
                (
                    "farming_type",
                    models.CharField(
                        choices=[
                            ("organic", "Organic"),
                            ("conventional", "Conventional"),
                            ("mixed", "Mixed"),
                        ],
                        default="conventional",
                        max_length=20,
                    ),
                ),
                ("language", models.CharField(default="en", max_length=10)),
                ("notification_enabled", models.BooleanField(default=True)),
                ("sms_enabled", models.BooleanField(default=True)),
                ("email_enabled", models.BooleanField(default=True)),
                ("whatsapp_enabled", models.BooleanField(default=False)),
                ("phone_verified", models.BooleanField(default=False)),
                ("email_verified", models.BooleanField(default=False)),
                ("kyc_verified", models.BooleanField(default=False)),
                ("kyc_document_type", models.CharField(blank=True, max_length=20)),
                ("kyc_document_number", models.CharField(blank=True, max_length=50)),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True, null=True, upload_to="profile_pictures/"
                    ),
                ),
                ("bio", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_login_ip", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "device_token",
                    models.CharField(
                        blank=True,
                        help_text="FCM token for push notifications",
                        max_length=255,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "user_type"],
                        name="UserManagem_user_id_f86b24_idx",
                    ),
                    models.Index(
                        fields=["phone_number"], name="UserManagem_phone_n_0041c6_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "plan_type",
                    models.CharField(
                        choices=[
                            ("free", "Free"),
                            ("basic", "Basic"),
                            ("premium", "Premium"),
                            ("enterprise", "Enterprise"),
                        ],
                        default="free",
                        max_length=20,
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("is_active", models.BooleanField(default=True)),
                (
                    "features",
                    models.JSONField(
                        default=dict, help_text="Plan features and limits"
                    ),
                ),
                (
                    "price",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("payment_id", models.CharField(blank=True, max_length=100)),
                ("payment_method", models.CharField(blank=True, max_length=50)),
                ("auto_renew", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "is_active"],
                        name="UserManagem_user_id_f8553e_idx",
                    ),
                    models.Index(
                        fields=["end_date"], name="UserManagem_end_dat_1c8a8e_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("warning", "Warning"),
                            ("alert", "Alert"),
                            ("success", "Success"),
                            ("error", "Error"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "channel",
                    models.CharField(
                        choices=[
                            ("in_app", "In-App"),
                            ("email", "Email"),
                            ("sms", "SMS"),
                            ("push", "Push Notification"),
                            ("whatsapp", "WhatsApp"),
                        ],
                        default="in_app",
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                ("data", models.JSONField(blank=True, default=dict)),
                ("is_read", models.BooleanField(default=False)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("is_sent", models.BooleanField(default=False)),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                (
                    "priority",
                    models.IntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "is_read"],
                        name="UserManagem_user_id_ae5f9f_idx",
                    ),
                    models.Index(
                        fields=["user", "-created_at"],
                        name="UserManagem_user_id_318c59_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ticket_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "feedback_type",
                    models.CharField(
                        choices=[
                            ("bug", "Bug Report"),
                            ("feature", "Feature Request"),
                            ("complaint", "Complaint"),
                            ("suggestion", "Suggestion"),
                            ("appreciation", "Appreciation"),
                        ],
                        max_length=20,
                    ),
                ),
                ("subject", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("attachments", models.JSONField(blank=True, default=list)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("in_progress", "In Progress"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                        ],
                        default="open",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("resolution", models.TextField(blank=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_feedbacks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedbacks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "status"], name="UserManagem_user_id_13b1fb_idx"
                    ),
                    models.Index(
                        fields=["ticket_id"], name="UserManagem_ticket__9f8623_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ApiKey",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("key", models.CharField(max_length=64, unique=True)),
                ("secret", models.CharField(max_length=64)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "permissions",
                    models.JSONField(
                        default=list, help_text="List of permitted endpoints"
                    ),
                ),
                (
                    "rate_limit",
                    models.IntegerField(default=1000, help_text="Requests per hour"),
                ),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_keys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["key"], name="UserManagem_key_ef3b00_idx"),
                    models.Index(
                        fields=["user", "is_active"],
                        name="UserManagem_user_id_391e95_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ActivityLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("activity_type", models.CharField(max_length=50)),
                ("description", models.TextField()),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.CharField(blank=True, max_length=255)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activity_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "-created_at"],
                        name="UserManagem_user_id_faa6b4_idx",
                    ),
                    models.Index(
                        fields=["activity_type"], name="UserManagem_activit_45e35d_idx"
                    ),
                ],
            },
        ),
    ]
