{
  "info": {
    "name": "SmartCropAdvisory API - Upgraded Endpoints v3.0",
    "description": "🌾 Next-level API collection for SmartCropAdvisory—AI ag intel on steroids. Covers all backend apps, real-time hooks, bulk ops, and deep testing. Built for devs who don't mess around.",
    "version": "3.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Yo, system check before we blast off",
          "console.log('🚀 Hitting:', pm.request.url.toString());",
          "console.log('🔐 Token status:', pm.collectionVariables.get('auth_token') ? 'Locked n loaded' : 'Ghost mode');",
          "console.log('📅 Timestamp:', new Date().toISOString());",
          "// Auto-set test IDs if missing",
          "if (!pm.collectionVariables.get('test_user_id')) { pm.collectionVariables.set('test_user_id', '1'); }",
          "if (!pm.collectionVariables.get('test_farm_id')) { pm.collectionVariables.set('test_farm_id', '1'); }"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global smoke test, bitch—keep it tight",
          "pm.test('⚡ Response ain't dragging', () => { pm.expect(pm.response.responseTime).to.be.below(3000); });",
          "pm.test('📋 JSON body or bust', () => { if (pm.response.headers.get('Content-Type')?.includes('application/json')) { pm.response.to.have.jsonBody(); } });",
          "pm.test('🔒 Headers locked down', () => { pm.expect(pm.response.headers.has('X-Frame-Options')).to.be.true; });",
          "// Log the vibes",
          "console.log('Status:', pm.response.status, 'Time:', pm.response.responseTime + 'ms');"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://127.0.0.1:8000",
      "type": "string",
      "description": "Base URL for the API grind"
    },
    {
      "key": "api_base_url",
      "value": "{{base_url}}/api",
      "type": "string",
      "description": "API root—where the magic happens"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string",
      "description": "JWT token—keep this fresh"
    },
    {
      "key": "test_user_id",
      "value": "1",
      "type": "string"
    },
    {
      "key": "test_farm_id",
      "value": "1",
      "type": "string"
    },
    {
      "key": "test_field_id",
      "value": "1",
      "type": "string"
    },
    {
      "key": "test_crop_id",
      "value": "1",
      "type": "string"
    },
    {
      "key": "api_version",
      "value": "v1",
      "type": "string"
    },
    {
      "key": "ws_url",
      "value": "ws://127.0.0.1:8000/ws/alerts/",
      "type": "string",
      "description": "WebSocket for real-time alerts—future-proof that shit"
    }
  ],
  "item": [
    {
      "name": "00_Homepage_Root_Endpoints",
      "description": "🏠 Root vibes and system entry points—keep it simple",
      "item": [
        {
          "name": "Homepage",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Homepage slaps', () => { pm.response.to.have.status(200); });",
                  "pm.test('HTML with branding', () => { pm.expect(pm.response.text()).to.include('SmartCropAdvisory'); });"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [{ "key": "Accept", "value": "text/html" }],
            "url": { "raw": "{{base_url}}/", "host": ["{{base_url}}"], "path": [""] },
            "description": "🏠 Landing page—agri intel dashboard"
          }
        },
        {
          "name": "API Overview",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('API deets loaded', () => { pm.response.to.have.status(200); });",
                  "pm.test('Endpoints listed', () => { const json = pm.response.json(); pm.expect(json.endpoints).to.have.all.keys('advisory', 'crop_analysis', 'irrigation', 'market', 'weather', 'system_status'); });"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [{ "key": "Accept", "value": "application/json" }],
            "url": { "raw": "{{api_base_url}}/", "host": ["{{api_base_url}}"], "path": [""] },
            "description": "📊 Full API map—endpoints, versions, docs links"
          }
        },
        {
          "name": "Favicon",
          "request": {
            "method": "GET",
            "url": { "raw": "{{base_url}}/favicon.ico", "host": ["{{base_url}}"], "path": ["favicon.ico"] },
            "description": "🎨 Icon for that clean look"
          }
        },
        {
          "name": "Robots.txt",
          "request": {
            "method": "GET",
            "url": { "raw": "{{base_url}}/robots.txt", "host": ["{{base_url}}"], "path": ["robots.txt"] },
            "description": "🤖 Crawler rules—SEO basics"
          }
        }
      ]
    },
    {
      "name": "01_API_Documentation",
      "description": "📚 Docs on tap—Swagger, ReDoc, schema dumps",
      "item": [
        {
          "name": "OpenAPI Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Schema good', () => { pm.response.to.have.status(200); });",
                  "pm.test('OpenAPI format', () => { const json = pm.response.json(); pm.expect(json).to.have.property('openapi').that.equals('3.0.0'); pm.expect(json).to.have.property('paths'); });"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [{ "key": "Accept", "value": "application/vnd.oai.openapi+json" }],
            "url": { "raw": "{{api_base_url}}/schema/", "host": ["{{api_base_url}}"], "path": ["schema", ""] },
            "description": "📋 Raw OpenAPI 3.0 spec—import to your tools"
          }
        },
        {
          "name": "Swagger UI",
          "request": {
            "method": "GET",
            "header": [{ "key": "Accept", "value": "text/html" }],
            "url": { "raw": "{{api_base_url}}/docs/", "host": ["{{api_base_url}}"], "path": ["docs", ""] },
            "description": "📖 Interactive Swagger—play with endpoints live"
          }
        },
        {
          "name": "ReDoc",
          "request": {
            "method": "GET",
            "header": [{ "key": "Accept", "value": "text/html" }],
            "url": { "raw": "{{api_base_url}}/redoc/", "host": ["{{api_base_url}}"], "path": ["redoc", ""] },
            "description": "📚 Clean ReDoc docs—print-friendly"
          }
        },
        {
          "name": "API Changelog",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/changelog/", "host": ["{{api_base_url}}"], "path": ["changelog", ""] },
            "description": "📝 Version history and breaking changes"
          }
        }
      ]
    },
    {
      "name": "02_System_Health_Status",
      "description": "🏥 Health checks—keep the backend from crashing, yo",
      "item": [
        {
          "name": "Full Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('System alive', () => { pm.response.to.have.status(200); });",
                  "pm.test('All components green', () => { const json = pm.response.json(); pm.expect(json).to.have.all.keys('database', 'cache', 'ml_models', 'external_apis', 'weather_service'); Object.values(json).forEach(status => pm.expect(status).to.equal('healthy')); });"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "auth": { "type": "noauth" },
            "url": { "raw": "{{api_base_url}}/health/", "host": ["{{api_base_url}}"], "path": ["health", ""] },
            "description": "🩺 Ping everything—DB, cache, ML, weather API, Redis"
          }
        },
        {
          "name": "DB Health",
          "request": {
            "method": "GET",
            "auth": { "type": "noauth" },
            "url": { "raw": "{{api_base_url}}/health/?check=database", "host": ["{{api_base_url}}"], "path": ["health", ""], "query": [{ "key": "check", "value": "database" }] },
            "description": "💾 SQLite/Postgres vibes—connections, queries"
          }
        },
        {
          "name": "System Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status deets', () => { pm.response.to.have.status(200); });",
                  "pm.test('Metrics included', () => { const json = pm.response.json(); pm.expect(json).to.have.property('uptime').above(0); pm.expect(json).to.have.property('memory_usage'); });"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/status/", "host": ["{{api_base_url}}"], "path": ["status", ""] },
            "description": "📊 Uptime, load, ML model status"
          }
        },
        {
          "name": "Stats Dashboard",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/status/stats/?period=24h", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "status", "stats", ""], "query": [{ "key": "period", "value": "24h" }] },
            "description": "📈 Requests/sec, errors, top endpoints"
          }
        },
        {
          "name": "Detailed Health",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/status/health/details/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "status", "health", "details", ""] },
            "description": "🔍 Deep dive—logs, configs, dependencies"
          }
        },
        {
          "name": "System Status v1",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/status/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "status", ""] },
            "description": "🗄️ System status from SystemStatus app (v1)"
          }
        }
      ]
    },
    {
      "name": "03_Authentication_Users",
      "description": "🔐 User flow—register, login, profiles, all that jazz",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('New user in', () => { pm.response.to.have.status(201); });",
                  "pm.test('User ID saved', () => { const json = pm.response.json(); if (json.user?.id) { pm.collectionVariables.set('test_user_id', json.user.id); } });",
                  "pm.test('Profile fields', () => { const json = pm.response.json(); pm.expect(json.user).to.have.all.keys('username', 'email', 'phone_number'); });"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"yo_farmer_{{$randomInt}}\",\n  \"email\": \"farmer{{$randomInt}}@agritech.com\",\n  \"password\": \"YoBitch2025!\",\n  \"password_confirm\": \"YoBitch2025!\",\n  \"first_name\": \"Jesse\",\n  \"last_name\": \"Pinkman\",\n  \"phone_number\": \"+91{{$randomPhoneNumber}}\",\n  \"preferred_language\": \"en\"\n}"
            },
            "auth": { "type": "noauth" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/users/register/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "users", "register", ""] },
            "description": "👤 New farmer signup—full profile"
          }
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logged in', () => { pm.response.to.have.status(200); });",
                  "pm.test('Token grabbed', () => { const json = pm.response.json(); if (json.access) { pm.collectionVariables.set('auth_token', json.access); console.log('Token yo!'); } });"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"YoBitch2025!\"\n}" },
            "auth": { "type": "noauth" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/users/login/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "users", "login", ""] },
            "description": "🔑 Get that JWT—session start"
          }
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/users/logout/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "users", "logout", ""] },
            "description": "🚪 Blacklist token—peace out"
          }
        },
        {
          "name": "Change Password",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"old_password\": \"YoBitch2025!\",\n  \"new_password\": \"NewYo2026!\",\n  \"confirm_password\": \"NewYo2026!\"\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/users/change-password/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "users", "change-password", ""] },
            "description": "🔐 Swap passwords—keep it secure"
          }
        },
        {
          "name": "Get Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile fetched', () => { pm.response.to.have.status(200); });",
                  "pm.test('Farm deets', () => { const json = pm.response.json(); pm.expect(json).to.have.property('farm_details'); });"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/users/profiles/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "users", "profiles", ""] },
            "description": "👤 Current user + farms overview"
          }
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "PATCH",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"phone_number\": \"+919876543210\",\n  \"farm_size\": 15,\n  \"farming_experience\": 10,\n  \"preferred_language\": \"hi\"\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/users/profiles/{{test_user_id}}/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "users", "profiles", "{{test_user_id}}", ""] },
            "description": "✏️ Tweak profile—add farm experience"
          }
        },
        {
          "name": "User Dashboard",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/users/dashboard/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "users", "dashboard", ""] },
            "description": "📊 Personal stats—crops, alerts, yields"
          }
        },
        {
          "name": "User Stats",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/users/statistics/?days=30", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "users", "statistics", ""], "query": [{ "key": "days", "value": "30" }] },
            "description": "📈 Usage trends—API calls, sessions"
          }
        },
        {
          "name": "Upload Profile Pic",
          "request": {
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                { "key": "picture", "type": "file", "src": "" },
                { "key": "description", "value": "Farmer profile", "type": "text" }
              ]
            },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/users/profiles/upload_picture/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "users", "profiles", "upload_picture", ""] },
            "description": "📸 Drop a pic—profile upgrade"
          }
        }
      ]
    },
    {
      "name": "04_Advisory_Services",
      "description": "🎯 Core advisory—farms, sessions, alerts from your Advisory app",
      "item": [
        {
          "name": "List Farms",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/advisory/farms/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "advisory", "farms", ""] },
            "description": "🏡 User's farms—filter by active"
          }
        },
        {
          "name": "Create Farm",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 201) { pm.collectionVariables.set('test_farm_id', pm.response.json().id); }"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"name\": \"YoFarm_{{$randomInt}}\",\n  \"farm_type\": \"medium\",\n  \"latitude\": 23.2325,\n  \"longitude\": 87.8615,\n  \"address\": \"Barddhaman fields\",\n  \"district\": \"Barddhaman\",\n  \"state\": \"West Bengal\",\n  \"pincode\": \"713201\",\n  \"total_area\": 5.5,\n  \"cultivated_area\": 4.0\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/advisory/farms/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "advisory", "farms", ""] },
            "description": "➕ New farm—location + size deets"
          }
        },
        {
          "name": "Farm Dashboard",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/advisory/farms/{{test_farm_id}}/dashboard/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "advisory", "farms", "{{test_farm_id}}", "dashboard", ""] },
            "description": "🏪 Health score, alerts, recs summary"
          }
        },
        {
          "name": "Comprehensive Advisory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Advisory dropped', () => { pm.response.to.have.status(200); });",
                  "pm.test('Full payload', () => { const json = pm.response.json(); pm.expect(json).to.have.all.keys('session_id', 'recommendations', 'confidence_score'); });"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"session_type\": \"comprehensive\",\n  \"soil_ph\": 6.5,\n  \"soil_nitrogen\": 60,\n  \"soil_phosphorus\": 40,\n  \"soil_potassium\": 80,\n  \"rainfall_mm\": 800,\n  \"temperature_avg\": 25,\n  \"include_market_analysis\": true,\n  \"include_weather_forecast\": true,\n  \"forecast_days\": 7,\n  \"current_crops\": [{\"name\": \"rice\", \"area\": 2.5}]\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/advisory/farms/{{test_farm_id}}/get_advisory/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "advisory", "farms", "{{test_farm_id}}", "get_advisory", ""] },
            "description": "🎯 AI advisory—soil, weather, market mashup"
          }
        },
        {
          "name": "Advisory Session List",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/advisory/sessions/?farm={{test_farm_id}}&limit=10", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "advisory", "sessions", ""], "query": [{ "key": "farm", "value": "{{test_farm_id}}" }, { "key": "limit", "value": "10" }] },
            "description": "📋 Past sessions—query params, recs"
          }
        },
        {
          "name": "Get Alerts",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/advisory/farms/{{test_farm_id}}/alerts/?unresolved=true&priority=high", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "advisory", "farms", "{{test_farm_id}}", "alerts", ""], "query": [{ "key": "unresolved", "value": "true" }, { "key": "priority", "value": "high" }] },
            "description": "🚨 Farm alerts—weather, disease, market"
          }
        },
        {
          "name": "Quick Reco",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"soil_ph\": 6.2,\n  \"soil_nitrogen\": 55,\n  \"soil_phosphorus\": 35,\n  \"soil_potassium\": 75,\n  \"rainfall_mm\": 750,\n  \"temperature_avg\": 28\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/advisory/farms/{{test_farm_id}}/quick_recommendation/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "advisory", "farms", "{{test_farm_id}}", "quick_recommendation", ""] },
            "description": "⚡ Fast crop/fert recs—soil inputs only"
          }
        },
        {
          "name": "Resolve Alert",
          "request": {
            "method": "PATCH",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"is_resolved\": true,\n  \"resolution_notes\": \"Fixed irrigation issue\"\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/advisory/alerts/1/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "advisory", "alerts", "1", ""] },
            "description": "✅ Close out an alert"
          }
        }
      ]
    },
    {
      "name": "05_CropAnalysis",
      "description": "🌱 Crop app—recommender, disease detect, yield predict from backend",
      "item": [
        {
          "name": "Crop List",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/crop/crops/?farm={{test_farm_id}}&active=true", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "crop", "crops", ""], "query": [{ "key": "farm", "value": "{{test_farm_id}}" }, { "key": "active", "value": "true" }] },
            "description": "🌾 Active crops—filter by farm"
          }
        },
        {
          "name": "Recommend Crops",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Recs generated', () => { pm.response.to.have.status(200); });",
                  "pm.test('Crop suggestions', () => { const json = pm.response.json(); pm.expect(json.success).to.be.true; pm.expect(json.data.recommendations).to.be.an('array').lengthOf.at.least(3); });"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"soil_ph\": 6.5,\n  \"soil_nitrogen\": 60,\n  \"soil_phosphorus\": 40,\n  \"soil_potassium\": 80,\n  \"rainfall_mm\": 800,\n  \"temperature_avg\": 25,\n  \"humidity\": 65,\n  \"soil_type\": \"loamy\",\n  \"season\": \"kharif\",\n  \"include_market\": true,\n  \"field_id\": \"1\"\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/crop/recommendations/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "crop", "recommendations", ""] },
            "description": "🤖 Crop recs—soil + season inputs"
          }
        },
        {
          "name": "Detect Disease",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "multipart/form-data" }],
            "body": {
              "mode": "formdata",
              "formdata": [
                { "key": "image", "type": "file", "src": "" },
                { "key": "crop_type", "value": "rice", "type": "text" },
                { "key": "field_id", "value": "{{test_field_id}}", "type": "text" }
              ]
            },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/crop/diseases/detect/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "crop", "diseases", "detect", ""] },
            "description": "🦠 Upload leaf pic—AI disease ID + treatment"
          }
        },
        {
          "name": "Predict Yield",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Yield forecast', () => { pm.response.to.have.status(200); });",
                  "pm.test('Placeholder response', () => { const json = pm.response.json(); pm.expect(json).to.have.property('message'); pm.expect(json).to.have.property('status', 'pending_implementation'); });"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"crop_id\": \"{{test_crop_id}}\",\n  \"field_id\": \"{{test_field_id}}\",\n  \"planting_date\": \"2025-06-01\",\n  \"weather_forecast\": {\"temp_avg\": 28, \"rainfall\": 900},\n  \"soil_nutrients\": {\"N\": 60, \"P\": 40, \"K\": 80}\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/crop/predict-yield/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "crop", "predict-yield", ""] },
            "description": "📈 Yield prediction—crop + env factors"
          }
        },
        {
          "name": "Crop Analysis Results",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/crop/analysis/{{test_crop_id}}/?include_images=true", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "crop", "analysis", "{{test_crop_id}}", ""], "query": [{ "key": "include_images", "value": "true" }] },
            "description": "📊 Full crop report—growth, issues, history"
          }
        },
        {
          "name": "Bulk Crop Upload",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "[\n  {\"name\": \"rice\", \"area\": 2.0, \"planting_date\": \"2025-06-01\"},\n  {\"name\": \"wheat\", \"area\": 1.5, \"planting_date\": \"2025-11-15\"}\n]" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/crop/bulk-upload/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "crop", "bulk-upload", ""] },
            "description": "📥 Batch add crops—JSON array"
          }
        },
        {
          "name": "Mongo Crop Query",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"query\": {\"crop_name\": \"rice\", \"district\": \"Barddhaman\"},\n  \"projection\": {\"_id\": 0, \"yield_history\": 1}\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/crop/mongo/query/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "crop", "mongo", "query", ""] },
            "description": "🗄️ Raw Mongo query for crop data"
          }
        }
      ]
    },
    {
      "name": "06_IrrigationAdvisor",
      "description": "💧 Irrigation app—schedules, moisture, optimizer",
      "item": [
        {
          "name": "Moisture Readings",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/irrigation/moisture/?field={{test_field_id}}&days=7", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "irrigation", "moisture", ""], "query": [{ "key": "field", "value": "{{test_field_id}}" }, { "key": "days", "value": "7" }] },
            "description": "📏 Current soil moisture—sensor data"
          }
        },
        {
          "name": "Upload Moisture",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"field\": \"{{test_field_id}}\",\n  \"moisture_level\": 42.5,\n  \"depth\": 20,\n  \"temperature\": 26.0,\n  \"timestamp\": \"2025-09-14T10:00:00Z\"\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/irrigation/moisture/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "irrigation", "moisture", ""] },
            "description": "📥 Log new reading—IoT integration"
          }
        },
        {
          "name": "Irrigation Schedules",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/irrigation/schedules/?field={{test_field_id}}&upcoming=true", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "irrigation", "schedules", ""], "query": [{ "key": "field", "value": "{{test_field_id}}" }, { "key": "upcoming", "value": "true" }] },
            "description": "📅 Upcoming schedules—weather-adjusted"
          }
        },
        {
          "name": "Create Schedule",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 201) { pm.collectionVariables.set('test_schedule_id', pm.response.json().id); }"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"field\": \"{{test_field_id}}\",\n  \"scheduled_date\": \"2025-09-15\",\n  \"duration_minutes\": 30,\n  \"water_amount\": 1200,\n  \"type\": \"drip\",\n  \"weather_dependent\": true\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/irrigation/schedules/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "irrigation", "schedules", ""] },
            "description": "📅 New schedule—auto-optimize later"
          }
        },
        {
          "name": "AI Irrigation Advisor",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"field_id\": \"{{test_field_id}}\",\n  \"crop_stage\": \"flowering\",\n  \"forecast_days\": 5,\n  \"goal\": \"efficiency\"\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/irrigation/advisor/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "irrigation", "advisor", ""] },
            "description": "🤖 Smart recs—moisture + weather"
          }
        },
        {
          "name": "Optimize Schedule",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"schedule_id\": \"{{test_schedule_id}}\",\n  \"adjust_for_weather\": true,\n  \"min_moisture\": 35\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/irrigation/schedules/optimize/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "irrigation", "schedules", "optimize", ""] },
            "description": "⚡ Tweak schedule—AI optimizer"
          }
        },
        {
          "name": "Water History",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/irrigation/history/?field={{test_field_id}}&period=monthly", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "irrigation", "history", ""], "query": [{ "key": "field", "value": "{{test_field_id}}" }, { "key": "period", "value": "monthly" }] },
            "description": "📊 Usage trends—charts ready"
          }
        },
        {
          "name": "Bulk Moisture Upload",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "[\n  {\"field\": \"{{test_field_id}}\", \"moisture\": 45, \"timestamp\": \"2025-09-14T09:00:00Z\"},\n  {\"field\": \"{{test_field_id}}\", \"moisture\": 48, \"timestamp\": \"2025-09-14T10:00:00Z\"}\n]" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/irrigation/moisture/bulk/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "irrigation", "moisture", "bulk", ""] },
            "description": "📥 Batch sensor data—IoT flood"
          }
        }
      ]
    },
    {
      "name": "07_MarketAnalysis",
      "description": "📈 Market app—prices, trends, predictions, alerts",
      "item": [
        {
          "name": "Nearby Markets",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/market/markets/?lat=23.2325&lon=87.8615&radius=100", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "market", "markets", ""], "query": [{ "key": "lat", "value": "23.2325" }, { "key": "lon", "value": "87.8615" }, { "key": "radius", "value": "100" }] },
            "description": "🏪 Local mandis—distance sorted"
          }
        },
        {
          "name": "Current Prices",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prices fresh', () => { pm.response.to.have.status(200); });",
                  "pm.test('Price structure', () => { const json = pm.response.json(); if (json.results?.length) { const p = json.results[0]; pm.expect(p).to.have.property('modal_price').above(0); } });"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/market/prices/?commodity=rice,wheat&date=today", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "market", "prices", ""], "query": [{ "key": "commodity", "value": "rice,wheat" }, { "key": "date", "value": "today" }] },
            "description": "💰 Live prices—multi-commodity"
          }
        },
        {
          "name": "Price Prediction",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"commodity\": \"rice\",\n  \"market\": \"Barddhaman\",\n  \"horizon_days\": 30,\n  \"include_weather\": true\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/market/predictions/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "market", "predictions", ""] },
            "description": "🔮 Forecast prices—ML magic"
          }
        },
        {
          "name": "Trend Analysis",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/market/trends/?commodity=rice&period=yearly&market=Barddhaman", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "market", "trends", ""], "query": [{ "key": "commodity", "value": "rice" }, { "key": "period", "value": "yearly" }, { "key": "market", "value": "Barddhaman" }] },
            "description": "📉 Price trends—seasonal patterns"
          }
        },
        {
          "name": "Create Transaction",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"type\": \"sell\",\n  \"commodity\": \"rice\",\n  \"quantity\": 100,\n  \"price_per_unit\": 2500,\n  \"total\": 250000,\n  \"date\": \"2025-09-14\",\n  \"market\": \"Barddhaman\"\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/market/transactions/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "market", "transactions", ""] },
            "description": "💼 Log a sale—track profits"
          }
        },
        {
          "name": "Profit/Loss Report",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/market/transactions/report/?period=quarter&commodity=rice", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "market", "transactions", "report", ""], "query": [{ "key": "period", "value": "quarter" }, { "key": "commodity", "value": "rice" }] },
            "description": "📊 P&L breakdown—costs included"
          }
        },
        {
          "name": "Set Price Alert",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"commodity\": \"rice\",\n  \"threshold\": 3000,\n  \"type\": \"above\",\n  \"notify_via\": [\"email\", \"sms\"]\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/market/alerts/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "market", "alerts", ""] },
            "description": "🔔 Alert on price hits—push notifications"
          }
        },
        {
          "name": "Market Opportunities",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/market/opportunities/?crop=rice&location=Barddhaman", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "market", "opportunities", ""], "query": [{ "key": "crop", "value": "rice" }, { "key": "location", "value": "Barddhaman" }] },
            "description": "🎯 Best sell times/markets—AI scored"
          }
        }
      ]
    },
    {
      "name": "08_WeatherIntegration",
      "description": "☀️ Weather app—forecasts, alerts, crop suitability from your code",
      "item": [
        {
          "name": "Current Weather",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Weather now', () => { pm.response.to.have.status(200); });",
                  "pm.test('Core fields', () => { const json = pm.response.json(); pm.expect(json).to.have.all.keys('temperature', 'humidity', 'wind_speed', 'weather_condition'); });"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/weather/api/current/?lat=23.2325&lon=87.8615", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "weather", "api", "current", ""], "query": [{ "key": "lat", "value": "23.2325" }, { "key": "lon", "value": "87.8615" }] },
            "description": "🌤️ OpenWeather pull—current conditions"
          }
        },
        {
          "name": "Forecast",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/weather/api/forecast/?lat=23.2325&lon=87.8615&days=7", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "weather", "api", "forecast", ""], "query": [{ "key": "lat", "value": "23.2325" }, { "key": "lon", "value": "87.8615" }, { "key": "days", "value": "7" }] },
            "description": "📅 7-day forecast—daily highs/lows"
          }
        },
        {
          "name": "Weather Alerts",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/weather/api/alerts/?lat=23.2325&lon=87.8615", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "weather", "api", "alerts", ""], "query": [{ "key": "lat", "value": "23.2325" }, { "key": "lon", "value": "87.8615" }] },
            "description": "⚠️ Storm warnings—severity levels"
          }
        },
        {
          "name": "Analyze for Crop",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"crop_name\": \"rice\",\n  \"latitude\": 23.2325,\n  \"longitude\": 87.8615,\n  \"analysis_period\": 30\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/weather/forecasts/analyze_for_crop/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "weather", "forecasts", "analyze_for_crop", ""] },
            "description": "🌾 Suitability score—temp, rain match"
          }
        },
        {
          "name": "Planting Window",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"crop_name\": \"wheat\",\n  \"latitude\": 23.2325,\n  \"longitude\": 87.8615,\n  \"days\": 60\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/weather/forecasts/planting_window/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "weather", "forecasts", "planting_window", ""] },
            "description": "🗓️ Best plant dates—forecast based"
          }
        },
        {
          "name": "Crop Suitability Check",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/weather/crop-requirements/check_suitability/?lat=23.2325&lon=87.8615", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "weather", "crop-requirements", "check_suitability", ""], "query": [{ "key": "lat", "value": "23.2325" }, { "key": "lon", "value": "87.8615" }] },
            "description": "✅ Top suitable crops now—scored list"
          }
        },
        {
          "name": "Extreme Risk Analysis",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/weather/api/extreme_weather_risk/?lat=23.2325&lon=87.8615&days=5", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "weather", "api", "extreme_weather_risk", ""], "query": [{ "key": "lat", "value": "23.2325" }, { "key": "lon", "value": "87.8615" }, { "key": "days", "value": "5" }] },
            "description": "🌪️ Flood/drought risks—proactive alerts"
          }
        },
        {
          "name": "Station Data",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/weather/stations/?district=Barddhaman", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "weather", "stations", ""], "query": [{ "key": "district", "value": "Barddhaman" }] },
            "description": "📡 Local stations—historical data"
          }
        }
      ]
    },
    {
      "name": "09_SystemStatus",
      "description": "⚙️ System app—logs, monitoring, utils",
      "item": [
        {
          "name": "Recent Logs",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/status/logs/?level=error&limit=50&since=1h", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "status", "logs", ""], "query": [{ "key": "level", "value": "error" }, { "key": "limit", "value": "50" }, { "key": "since", "value": "1h" }] },
            "description": "📄 Tail logs—api, ml, weather"
          }
        },
        {
          "name": "Model Status",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/status/models/?app=crop_analysis", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "status", "models", ""], "query": [{ "key": "app", "value": "crop_analysis" }] },
            "description": "🧠 ML models—trained, accuracy, last update"
          }
        },
        {
          "name": "Cache Stats",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/status/cache/?keys=weather_*", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "status", "cache", ""], "query": [{ "key": "keys", "value": "weather_*" }] },
            "description": "🔄 Redis hits/misses—eviction deets"
          }
        },
        {
          "name": "API Metrics",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/status/metrics/?endpoint=advisory&period=hourly", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "status", "metrics", ""], "query": [{ "key": "endpoint", "value": "advisory" }, { "key": "period", "value": "hourly" }] },
            "description": "📊 Endpoint perf—latency, errors"
          }
        }
      ]
    },
    {
      "name": "10_UserManagement_Extended",
      "description": "👥 User extras—notifs, feedback, subs",
      "item": [
        {
          "name": "Notifications",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/users/notifications/?unread=true&types=alert,update", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "users", "notifications", ""], "query": [{ "key": "unread", "value": "true" }, { "key": "types", "value": "alert,update" }] },
            "description": "🔔 Inbox—farm alerts, market updates"
          }
        },
        {
          "name": "Mark Read",
          "request": {
            "method": "PATCH",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"ids\": [1,2,3],\n  \"mark_as\": \"read\"\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/users/notifications/bulk/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "users", "notifications", "bulk", ""] },
            "description": "✅ Bulk read—clear the noise"
          }
        },
        {
          "name": "Activity Log",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/users/activities/?type=api&days=7", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "users", "activities", ""], "query": [{ "key": "type", "value": "api" }, { "key": "days", "value": "7" }] },
            "description": "📋 Audit trail—actions, timestamps"
          }
        },
        {
          "name": "Feedback Submit",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"type\": \"bug\",\n  \"title\": \"Yield pred off\",\n  \"description\": \"Numbers don't match field data, yo\",\n  \"priority\": \"high\"\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/users/feedback/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "users", "feedback", ""] },
            "description": "💬 Drop feedback—helps us level up"
          }
        },
        {
          "name": "Subscriptions",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/users/subscriptions/?include_usage=true", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "users", "subscriptions", ""], "query": [{ "key": "include_usage", "value": "true" }] },
            "description": "💳 Plan deets—quotas, billing"
          }
        },
        {
          "name": "API Keys",
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/{{api_version}}/users/api-keys/?active=true", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "users", "api-keys", ""], "query": [{ "key": "active", "value": "true" }] },
            "description": "🔑 Manage keys—rate limits, perms"
          }
        }
      ]
    },
    {
      "name": "11_RealTime_WebSockets",
      "description": "🔴 Live updates—alerts, prices via WS (forward-thinking AF)",
      "item": [
        {
          "name": "Connect Alerts WS",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('WS connected', () => { pm.expect(pm.websocket.current.connected).to.be.true; });",
                  "// Sub to alerts",
                  "pm.websocket.send({ text: JSON.stringify({ action: 'subscribe', channel: 'farm_alerts', farm_id: '{{test_farm_id}}' }) });"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": { "raw": "{{ws_url}}?token={{auth_token}}", "host": ["{{ws_url}}"], "path": [""] },
            "description": "🔴 Real-time farm alerts—connect & sub"
          }
        },
        {
          "name": "Price Updates WS",
          "request": {
            "method": "GET",
            "url": { "raw": "ws://127.0.0.1:8000/ws/market/?token={{auth_token}}&commodity=rice", "host": ["ws://127.0.0.1:8000"], "path": ["ws", "market", ""], "query": [{ "key": "token", "value": "{{auth_token}}" }, { "key": "commodity", "value": "rice" }] },
            "description": "💰 Live price ticks—subscribe to commodities"
          }
        }
      ]
    },
    {
      "name": "12_File_Media",
      "description": "📁 Uploads—images, datasets, media handling",
      "item": [
        {
          "name": "Upload Crop Image",
          "request": {
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                { "key": "image", "type": "file", "src": "" },
                { "key": "crop_id", "value": "{{test_crop_id}}", "type": "text" },
                { "key": "type", "value": "disease_scan", "type": "text" }
              ]
            },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/crop/images/upload/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "crop", "images", "upload", ""] },
            "description": "🖼️ Processed image upload—AI ready"
          }
        },
        {
          "name": "Media List",
          "request": {
            "method": "GET",
            "url": { "raw": "{{base_url}}/media/", "host": ["{{base_url}}"], "path": ["media", ""] },
            "description": "📂 Browse uploads—Processed/Uploads folders"
          }
        },
        {
          "name": "Static Assets",
          "request": {
            "method": "GET",
            "url": { "raw": "{{base_url}}/static/", "host": ["{{base_url}}"], "path": ["static", ""] },
            "description": "🎨 CSS/JS—frontend ties"
          }
        }
      ]
    },
    {
      "name": "13_Testing_Validation",
      "description": "🧪 Smoke tests, perf, error sims—keep it robust",
      "item": [
        {
          "name": "Full API Smoke",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Smoke clear', () => { pm.expect(pm.response.responseTime).below(2000); pm.response.to.have.status(200); });",
                  "console.log('Perf:', pm.response.responseTime + 'ms | Size:', pm.response.responseSize + 'B');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": { "raw": "{{api_base_url}}/health/", "host": ["{{api_base_url}}"], "path": ["health", ""] },
            "description": "🔥 Quick health + perf check"
          }
        },
        {
          "name": "Auth Fail Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('401 expected', () => { pm.response.to.have.status(401); });",
                  "pm.test('Error msg', () => { const json = pm.response.json(); pm.expect(json).to.have.property('detail').that.includes('authentication'); });"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "auth": { "type": "noauth" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/users/profiles/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "users", "profiles", ""] },
            "description": "🛡️ No token? Boom—error handling test"
          }
        },
        {
          "name": "Perf Benchmark",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const time = pm.response.responseTime;",
                  "pm.test('Perf tier', () => { pm.expect(time).below(5000); if (time < 500) console.log('🚀 Blazing'); else if (time < 1000) console.log('✅ Smooth'); else console.log('⚠️ Chill'); });",
                  "pm.collectionVariables.set('bench_time', time);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\"quick\": true}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/advisory/farms/{{test_farm_id}}/quick_recommendation/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "advisory", "farms", "{{test_farm_id}}", "quick_recommendation", ""] },
            "description": "⏱️ Load test—complex endpoint"
          }
        },
        {
          "name": "Invalid Input Test",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"soil_ph\": 999\n}" },
            "url": { "raw": "{{api_base_url}}/{{api_version}}/advisory/farms/{{test_farm_id}}/quick_recommendation/", "host": ["{{api_base_url}}"], "path": ["{{api_version}}", "advisory", "farms", "{{test_farm_id}}", "quick_recommendation", ""] },
            "description": "❌ Bad data—validation errors"
          }
        }
      ]
    },
    {
      "name": "14_Admin_Utils",
      "description": "🏛️ Admin only—migrations, commands",
      "item": [
        {
          "name": "Admin Panel",
          "request": {
            "method": "GET",
            "auth": { "type": "noauth" },
            "url": { "raw": "{{base_url}}/admin/", "host": ["{{base_url}}"], "path": ["admin", ""] },
            "description": "🛠️ Django admin—manage models"
          }
        },
        {
          "name": "Migrate to Mongo",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"collection\": \"crops\",\n  \"dry_run\": true\n}" },
            "url": { "raw": "{{api_base_url}}/management/migrate_to_mongodb/", "host": ["{{api_base_url}}"], "path": ["management", "migrate_to_mongodb", ""] },
            "description": "🗄️ Bulk migrate—SQL to Mongo"
          }
        }
      ]
    }
  ]
}
